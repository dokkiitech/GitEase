{"ast":null,"code":"export default {\n  data() {\n    return {\n      // フォームデータを格納するオブジェクト\n      gitData: {\n        username: \"\",\n        repository: \"\",\n        branch: \"main\",\n        // デフォルトのブランチ名\n        useUpstream: false // -u オプションのチェック状態\n      },\n      // Snackbarの状態管理\n      snackbar: {\n        show: false,\n        message: \"\",\n        color: \"\"\n      }\n    };\n  },\n  methods: {\n    // Git Pushコマンドを生成し、クリップボードにコピーする処理\n    copyToClipboard() {\n      const {\n        username,\n        repository,\n        branch,\n        useUpstream\n      } = this.gitData;\n\n      // 必須項目のチェック\n      if (!username || !repository) {\n        this.showSnackbar(\"ユーザー名とリポジトリ名は必須です。\", \"red\");\n        return;\n      }\n\n      // Git URLを生成\n      const gitURL = `https://github.com/${username}/${repository}.git`;\n\n      // コマンド生成\n      let commands = `git push https://${username}@github.com/${username}/${repository}.git`;\n      if (useUpstream) {\n        commands = `\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M ${branch}\ngit remote add origin ${gitURL}\ngit push -u origin ${branch}\n`;\n      } else if (branch) {\n        commands += ` ${branch}`;\n      }\n\n      // クリップボードにコピー\n      navigator.clipboard.writeText(commands.trim()).then(() => {\n        this.showSnackbar(\"クリップボードにコピーしました！\", \"green\");\n      }).catch(err => {\n        console.error(\"コピーに失敗しました: \", err);\n        this.showSnackbar(\"コピーに失敗しました。\", \"red\");\n      });\n    },\n    // Snackbarを表示する汎用メソッド\n    showSnackbar(message, color) {\n      this.snackbar.message = message;\n      this.snackbar.color = color;\n      this.snackbar.show = true;\n    }\n  }\n};","map":{"version":3,"names":["data","gitData","username","repository","branch","useUpstream","snackbar","show","message","color","methods","copyToClipboard","showSnackbar","gitURL","commands","navigator","clipboard","writeText","trim","then","catch","err","console","error"],"sources":["/Users/dokkiitech/dev/IntelliJ/Vuetify/GitEase/front/src/pages/GitPushCommandCopy.vue"],"sourcesContent":["<template>\n  <v-app>\n    <!-- メニューバー -->\n    <v-app-bar app color=\"primary\" dark>\n      <v-toolbar-title>Git Push Generator</v-toolbar-title>\n    </v-app-bar>\n\n    <!-- コンテンツ -->\n    <v-main>\n      <v-container>\n        <v-form ref=\"form\">\n          <!-- ユーザー名 -->\n          <v-text-field\n              label=\"GitHubユーザー名\"\n              v-model=\"gitData.username\"\n              required\n          ></v-text-field>\n\n          <!-- リポジトリー名 -->\n          <v-text-field\n              label=\"リポジトリー名\"\n              v-model=\"gitData.repository\"\n              required\n          ></v-text-field>\n\n          <!-- Branch名 (任意) -->\n          <v-text-field\n              label=\"Branch名 (任意)\"\n              v-model=\"gitData.branch\"\n          ></v-text-field>\n\n          <!-- -u オプション -->\n          <v-checkbox\n              v-model=\"gitData.useUpstream\"\n              label=\"-u オプションを追加\"\n          ></v-checkbox>\n\n          <!-- コピーするボタン -->\n          <v-btn @click=\"copyToClipboard\" color=\"primary\">Git Push コマンドをコピー</v-btn>\n        </v-form>\n      </v-container>\n\n      <!-- ポップアップメッセージ -->\n      <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"2000\">\n        {{ snackbar.message }}\n      </v-snackbar>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // フォームデータを格納するオブジェクト\n      gitData: {\n        username: \"\",\n        repository: \"\",\n        branch: \"main\", // デフォルトのブランチ名\n        useUpstream: false, // -u オプションのチェック状態\n      },\n      // Snackbarの状態管理\n      snackbar: {\n        show: false,\n        message: \"\",\n        color: \"\",\n      },\n    };\n  },\n  methods: {\n    // Git Pushコマンドを生成し、クリップボードにコピーする処理\n    copyToClipboard() {\n      const {username, repository, branch, useUpstream} = this.gitData;\n\n      // 必須項目のチェック\n      if (!username || !repository) {\n        this.showSnackbar(\"ユーザー名とリポジトリ名は必須です。\", \"red\");\n        return;\n      }\n\n      // Git URLを生成\n      const gitURL = `https://github.com/${username}/${repository}.git`;\n\n      // コマンド生成\n      let commands = `git push https://${username}@github.com/${username}/${repository}.git`;\n      if (useUpstream) {\n        commands = `\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M ${branch}\ngit remote add origin ${gitURL}\ngit push -u origin ${branch}\n`;\n      } else if (branch) {\n        commands += ` ${branch}`;\n      }\n\n      // クリップボードにコピー\n      navigator.clipboard\n          .writeText(commands.trim())\n          .then(() => {\n            this.showSnackbar(\"クリップボードにコピーしました！\", \"green\");\n          })\n          .catch((err) => {\n            console.error(\"コピーに失敗しました: \", err);\n            this.showSnackbar(\"コピーに失敗しました。\", \"red\");\n          });\n    },\n\n    // Snackbarを表示する汎用メソッド\n    showSnackbar(message, color) {\n      this.snackbar.message = message;\n      this.snackbar.color = color;\n      this.snackbar.show = true;\n    },\n  },\n};\n</script>"],"mappings":"AAmDA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,OAAO,EAAE;QACPC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,MAAM,EAAE,MAAM;QAAE;QAChBC,WAAW,EAAE,KAAK,CAAE;MACtB,CAAC;MACD;MACAC,QAAQ,EAAE;QACRC,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE;MACT;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,eAAeA,CAAA,EAAG;MAChB,MAAM;QAACT,QAAQ;QAAEC,UAAU;QAAEC,MAAM;QAAEC;MAAW,IAAI,IAAI,CAACJ,OAAO;;MAEhE;MACA,IAAI,CAACC,QAAO,IAAK,CAACC,UAAU,EAAE;QAC5B,IAAI,CAACS,YAAY,CAAC,oBAAoB,EAAE,KAAK,CAAC;QAC9C;MACF;;MAEA;MACA,MAAMC,MAAK,GAAI,sBAAsBX,QAAQ,IAAIC,UAAU,MAAM;;MAEjE;MACA,IAAIW,QAAO,GAAI,oBAAoBZ,QAAQ,eAAeA,QAAQ,IAAIC,UAAU,MAAM;MACtF,IAAIE,WAAW,EAAE;QACfS,QAAO,GAAI;AACnB;AACA;AACA;AACA,gBAAgBV,MAAM;AACtB,wBAAwBS,MAAM;AAC9B,qBAAqBT,MAAM;AAC3B,CAAC;MACK,OAAO,IAAIA,MAAM,EAAE;QACjBU,QAAO,IAAK,IAAIV,MAAM,EAAE;MAC1B;;MAEA;MACAW,SAAS,CAACC,SAAQ,CACbC,SAAS,CAACH,QAAQ,CAACI,IAAI,CAAC,CAAC,EACzBC,IAAI,CAAC,MAAM;QACV,IAAI,CAACP,YAAY,CAAC,kBAAkB,EAAE,OAAO,CAAC;MAChD,CAAC,EACAQ,KAAK,CAAEC,GAAG,IAAK;QACdC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC;QAClC,IAAI,CAACT,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC;MACzC,CAAC,CAAC;IACR,CAAC;IAED;IACAA,YAAYA,CAACJ,OAAO,EAAEC,KAAK,EAAE;MAC3B,IAAI,CAACH,QAAQ,CAACE,OAAM,GAAIA,OAAO;MAC/B,IAAI,CAACF,QAAQ,CAACG,KAAI,GAAIA,KAAK;MAC3B,IAAI,CAACH,QAAQ,CAACC,IAAG,GAAI,IAAI;IAC3B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}